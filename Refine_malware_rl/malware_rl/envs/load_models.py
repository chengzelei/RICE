from tianshou.utils.net.common import ActorCritic, DataParallelNet
from tianshou.utils.net.discrete import Actor, Critic
import argparse
import torch
from tianshou.data import Batch
from model import Net_ppo_parallel, Net_ppo
from tianshou.policy import PPOPolicy
from tianshou.utils.net.common import Net
import numpy as np
import os

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--task', type=str, default="malconv-train-v0")
    parser.add_argument('--reward-threshold', type=float, default=None)
    parser.add_argument('--seed', type=int, default=1626)
    parser.add_argument('--buffer-size', type=int, default=20000)
    parser.add_argument('--lr', type=float, default=1e-4)
    parser.add_argument('--gamma', type=float, default=0.99)
    parser.add_argument('--epoch', type=int, default=500)
    parser.add_argument('--step-per-epoch', type=int, default=2000)
    parser.add_argument('--episode-per-collect', type=int, default=100)
    parser.add_argument('--repeat-per-collect', type=int, default=2)
    parser.add_argument('--batch-size', type=int, default=64)
    parser.add_argument('--hidden-sizes', type=int, nargs='*', default=[1024, 512, 256])
    parser.add_argument('--training-num', type=int, default=80)
    parser.add_argument('--test-num', type=int, default=20)
    parser.add_argument('--logdir', type=str, default='log')
    parser.add_argument('--render', type=float, default=0.)
    parser.add_argument(
        '--device', type=str, default='cuda' if torch.cuda.is_available() else 'cpu'
    )
    # ppo special
    parser.add_argument('--vf-coef', type=float, default=0.5)
    parser.add_argument('--ent-coef', type=float, default=0.0)
    parser.add_argument('--eps-clip', type=float, default=0.2)
    parser.add_argument('--max-grad-norm', type=float, default=0.5)
    parser.add_argument('--gae-lambda', type=float, default=0.95)
    parser.add_argument('--rew-norm', type=int, default=0)
    parser.add_argument('--norm-adv', type=int, default=0)
    parser.add_argument('--recompute-adv', type=int, default=0)
    parser.add_argument('--dual-clip', type=float, default=None)
    parser.add_argument('--value-clip', type=int, default=0)
    args = parser.parse_known_args()[0]
    return args

def load_baseline_model():
    args = get_args()
    args.state_shape = 1048576
    args.action_shape = 16
    net = Net_ppo_parallel().to(args.device)
    actor = DataParallelNet(
            Actor(net, args.action_shape, device=None).to(args.device)
        )
    critic = DataParallelNet(Critic(net, device=None).to(args.device))
    actor_critic = ActorCritic(actor, critic)
    # orthogonal initialization
    for m in actor_critic.modules():
        if isinstance(m, torch.nn.Linear):
            torch.nn.init.orthogonal_(m.weight)
            torch.nn.init.zeros_(m.bias)
    optim = torch.optim.Adam(actor_critic.parameters(), lr=args.lr)
    dist = torch.distributions.Categorical
    policy = PPOPolicy(
        actor,
        critic,
        optim,
        dist,
        discount_factor=args.gamma,
        max_grad_norm=args.max_grad_norm,
        eps_clip=args.eps_clip,
        vf_coef=args.vf_coef,
        ent_coef=args.ent_coef,
        gae_lambda=args.gae_lambda,
        reward_normalization=args.rew_norm,
        dual_clip=args.dual_clip,
        value_clip=args.value_clip,
        action_space=2,
        deterministic_eval=True,
        advantage_normalization=args.norm_adv,
        recompute_advantage=args.recompute_adv
    )
    # policy.load_state_dict(torch.load('/home/zck7060/malware_rl/baseline/malconv-train-v0/ppo/best_policy.pth'))
    policy.load_state_dict(torch.load('/home/xww0766/malware_rl/retrain_models/malconv-retrain-v0/go_prob_0.5_bonus_scale_0.1_exp/0/best_policy.pth')['model'], strict=False)
    policy.eval()
    policy.action_type = "discrete"
    return policy

# def get_args():
#     parser = argparse.ArgumentParser()
#     parser.add_argument('--task', type=str, default='ember-train-v0')
#     parser.add_argument('--reward-threshold', type=float, default=None)
#     parser.add_argument('--seed', type=int, default=1626)
#     parser.add_argument('--eps-test', type=float, default=0.0)
#     parser.add_argument('--eps-train', type=float, default=0.05)
#     parser.add_argument('--buffer-size', type=int, default=20000)
#     parser.add_argument('--lr', type=float, default=1e-4)
#     parser.add_argument('--gamma', type=float, default=0.99)
#     parser.add_argument('--n-step', type=int, default=2)
#     parser.add_argument('--target-update-freq', type=int, default=320)
#     parser.add_argument('--epoch', type=int, default=500)
#     parser.add_argument('--step-per-epoch', type=int, default=2000)
#     parser.add_argument('--step-per-collect', type=int, default=1000)
#     parser.add_argument('--episode-per-collect', type=int, default=100)
#     parser.add_argument('--repeat-per-collect', type=int, default=2)
#     parser.add_argument('--batch-size', type=int, default=64)
#     parser.add_argument('--hidden-sizes', type=int, nargs='*', default=[1024, 512, 256])
#     parser.add_argument('--update-per-step', type=float, default=0.1)
#     parser.add_argument('--training-num', type=int, default=1)
#     parser.add_argument('--test-num', type=int, default=1)
#     parser.add_argument('--logdir', type=str, default='log')
#     parser.add_argument('--render', type=float, default=0.)
#     parser.add_argument(
#         '--device', type=str, default='cuda' if torch.cuda.is_available() else 'cpu'
#     )
#     parser.add_argument('--prioritized-replay', action="store_true", default=False)
#     parser.add_argument('--alpha', type=float, default=0.6)
#     parser.add_argument('--beta', type=float, default=0.4)
#     # ppo special
#     parser.add_argument('--vf-coef', type=float, default=0.5)
#     parser.add_argument('--ent-coef', type=float, default=0.0)
#     parser.add_argument('--eps-clip', type=float, default=0.2)
#     parser.add_argument('--max-grad-norm', type=float, default=0.5)
#     parser.add_argument('--gae-lambda', type=float, default=0.95)
#     parser.add_argument('--rew-norm', type=int, default=0)
#     parser.add_argument('--norm-adv', type=int, default=0)
#     parser.add_argument('--recompute-adv', type=int, default=0)
#     parser.add_argument('--dual-clip', type=float, default=None)
#     parser.add_argument('--value-clip', type=int, default=0)
#     args = parser.parse_known_args()[0]
#     return args

# def load_baseline_model():
#     args=get_args()
#     args.state_shape = 2381
#     args.action_shape = 16
#     # model
#     # net = Net(state_shape=args.state_shape, action_shape=args.action_shape, hidden_sizes=[1024, 512, 256],device=args.device).to(args.device)
#     net = Net_dqn(args.action_shape,args.device).to(args.device)
#     optim = torch.optim.Adam(net.parameters(), lr=args.lr)
#     policy = DQNPolicy(
#         net,
#         optim,
#         args.gamma,
#         args.n_step,
#         target_update_freq=args.target_update_freq,
#     )

#     policy.load_state_dict(torch.load('/home/zck7060/malware_rl/models/dqn_baseline_ckpt1.pth')["model"])
#     policy.set_eps(0)
#     policy.eval()
#     policy.action_type = "discrete"
#     return policy

def load_masknet():
    args = get_args()
    # Load the masknet
    args.state_space = 1048576
    args.action_shape = 2

    # seed
    np.random.seed(args.seed)
    torch.manual_seed(args.seed)
    # model

    net = Net_ppo().to(args.device)
    # if torch.cuda.is_available():
    #     actor = DataParallelNet(
    #         Actor(net, args.action_shape, device=None).to(args.device)
    #     )
    #     critic = DataParallelNet(Critic(net, device=None).to(args.device))
    # else:
    actor = Actor(net, args.action_shape, device=args.device).to(args.device)
    critic = Critic(net, device=args.device).to(args.device)
    actor_critic = ActorCritic(actor, critic)
    # orthogonal initialization
    for m in actor_critic.modules():
        if isinstance(m, torch.nn.Linear):
            torch.nn.init.orthogonal_(m.weight)
            torch.nn.init.zeros_(m.bias)
    optim = torch.optim.Adam(actor_critic.parameters(), lr=args.lr)
    dist = torch.distributions.Categorical
    policy = PPOPolicy(
        actor,
        critic,
        optim,
        dist,
        discount_factor=args.gamma,
        max_grad_norm=args.max_grad_norm,
        eps_clip=args.eps_clip,
        vf_coef=args.vf_coef,
        ent_coef=args.ent_coef,
        gae_lambda=args.gae_lambda,
        reward_normalization=args.rew_norm,
        dual_clip=args.dual_clip,
        value_clip=args.value_clip,
        action_space=args.action_shape,
        deterministic_eval=True,
        advantage_normalization=args.norm_adv,
        recompute_advantage=args.recompute_adv
    )

    # log
    log_path = os.path.join(args.logdir, args.task, 'ppo')
    policy.load_state_dict(torch.load('/home/zck7060/malware_rl/masknet/malconv-mask-v0/ppo/best_policy.pth'))
    return policy
